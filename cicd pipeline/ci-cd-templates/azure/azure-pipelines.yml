# Azure DevOps Pipeline for Node.js Applications

# Trigger the pipeline on push to main branch
trigger:
  branches:
    include:
      - main
      - master
  paths:
    exclude:
      - README.md
      - docs/*

# Pull request trigger
pr:
  branches:
    include:
      - main
      - master

# Define pipeline variables
variables:
  # Node.js version
  nodeVersion: '16.x'
  
  # Build configuration
  buildConfiguration: 'Release'
  
  # Docker registry service connection
  dockerRegistryServiceConnection: 'your-docker-registry-connection'
  
  # Docker image repository
  dockerRepository: 'your-docker-repository'
  
  # Docker image name
  dockerImageName: '$(dockerRepository)/nodejs-app'
  
  # Docker image tag
  dockerImageTag: '$(Build.BuildId)'
  
  # Azure Web App names
  devWebAppName: 'your-dev-webapp-name'
  stagingWebAppName: 'your-staging-webapp-name'
  prodWebAppName: 'your-prod-webapp-name'
  
  # Azure service connection
  azureServiceConnection: 'your-azure-service-connection'

# Define pipeline stages
stages:
  # Build stage
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Build, Test, and Package'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Checkout the repository
          - checkout: self
            displayName: 'Checkout Repository'
          
          # Setup Node.js
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)
          
          # Install dependencies
          - task: Npm@1
            displayName: 'Install Dependencies'
            inputs:
              command: 'ci'
              verbose: true
          
          # Lint the code
          - task: Npm@1
            displayName: 'Lint Code'
            inputs:
              command: 'custom'
              customCommand: 'run lint'
            continueOnError: true
          
          # Run unit tests
          - task: Npm@1
            displayName: 'Run Unit Tests'
            inputs:
              command: 'custom'
              customCommand: 'run test'
          
          # Run integration tests
          - task: Npm@1
            displayName: 'Run Integration Tests'
            inputs:
              command: 'custom'
              customCommand: 'run test:integration'
            continueOnError: true
          
          # Publish test results
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              mergeTestResults: true
              testRunTitle: 'Node.js Tests'
            condition: succeededOrFailed()
          
          # Publish code coverage
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
            condition: succeededOrFailed()
          
          # Build the application
          - task: Npm@1
            displayName: 'Build Application'
            inputs:
              command: 'custom'
              customCommand: 'run build'
          
          # Archive the build output
          - task: ArchiveFiles@2
            displayName: 'Archive Build Output'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
          
          # Publish build artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
          
          # Build and push Docker image
          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(dockerImageName)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(dockerImageTag)
                latest
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  # Deploy to Development stage
  - stage: DeployToDev
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - deployment: DeployToDev
        displayName: 'Deploy to Development Environment'
        environment: 'Development'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                # Download build artifacts
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download Build Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'
                
                # Deploy to Azure Web App
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    azureSubscription: '$(azureServiceConnection)'
                    appType: 'webApp'
                    appName: '$(devWebAppName)'
                    package: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).zip'
                    deploymentMethod: 'auto'

  # Deploy to Staging stage
  - stage: DeployToStaging
    displayName: 'Deploy to Staging'
    dependsOn: DeployToDev
    condition: succeeded()
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy to Staging Environment'
        environment: 'Staging'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                # Download build artifacts
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download Build Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'
                
                # Deploy to Azure Web App
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    azureSubscription: '$(azureServiceConnection)'
                    appType: 'webApp'
                    appName: '$(stagingWebAppName)'
                    package: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).zip'
                    deploymentMethod: 'auto'

  # Deploy to Production stage
  - stage: DeployToProduction
    displayName: 'Deploy to Production'
    dependsOn: DeployToStaging
    condition: succeeded()
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production Environment'
        environment: 'Production'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                # Download build artifacts
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download Build Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'
                
                # Deploy to Azure Web App
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    azureSubscription: '$(azureServiceConnection)'
                    appType: 'webApp'
                    appName: '$(prodWebAppName)'
                    package: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).zip'
                    deploymentMethod: 'auto'